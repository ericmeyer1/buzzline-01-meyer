"""
basic_consumer_eric.py

Consume a manufacturing log file in real time and alert on specific conditions.
"""

#####################################
# Import Modules
#####################################

# Import packages from Python Standard Library
import os
import time

# Import functions from local modules
from utils.utils_logger import logger, get_log_file_path

#####################################
# Define a function to process a single message
# #####################################


def process_message(log_file) -> None:
    """
    Continuously read a log file and process each message.

    Args:
        log_file (str): The path to the log file to read.
    """
    with open(log_file, "r") as file:
        # Move to the end of the file
        file.seek(0, os.SEEK_END)
        print("Consumer is ready and waiting for new manufacturing log messages...")

        while True:
            line = file.readline()

            if not line:
                # No new line yet, wait a bit
                time.sleep(1)
                continue

            # Process new log entry
            message = line.strip()
            print(f"Consumed log message: {message}")

            # Check for special conditions
            if "Status: Error" in message:
                print(f"🚨 ALERT: Machine error detected!\n{message}")
                logger.error(f"🚨 ALERT: Machine error detected!\n{message}")

            elif "Status: Warning" in message:
                print(f"⚠️ WARNING: Machine warning logged.\n{message}")
                logger.warning(f"⚠️ WARNING: Machine warning logged.\n{message}")

            elif "completed job" in message:
                print(f"✅ INFO: A machine completed a job.\n{message}")
                logger.info(f"✅ INFO: A machine completed a job.\n{message}")


#####################################
# Define main function for this script.
#####################################


def main() -> None:
    """Main entry point."""

    logger.info("START...")

    # Call the function we imported from utils/utils_logger module
    # to get the path to the log file being generated by the producer.
    # Assign the return value to a local variable.
    log_file_path = get_log_file_path()
    logger.info(f"Reading file located at {log_file_path}.")

    try:
        # Try to call the process_message function with the log file path
        # as an argument. We know things will go wrong
        # eventually when the user stops the process, so we use a try block.
        process_message(log_file_path)

    except KeyboardInterrupt:
        print("User stopped the process.")

    logger.info("END.....")


#####################################
# Conditional Execution
#####################################

# If this file is the one being executed, call the main() function
if __name__ == "__main__":
    main()
